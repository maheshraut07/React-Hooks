The useReducer hook in React is an alternative to useState for managing state in more complex scenarios. It is particularly useful when the state logic is more advanced and involves multiple sub-values or when the next state depends on the previous state. It follows a pattern similar to how a reducer function works in Redux, with state being updated through a dispatched action rather than direct mutation.

Key Concepts:
Reducer Function: A reducer is a pure function that takes two arguments: the current state and an action. Based on the action type, it returns a new state.

javascript
Copy code
const reducer = (state, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return { count: state.count + 1 };
    case 'DECREMENT':
      return { count: state.count - 1 };
    default:
      return state;
  }
};
Initial State: You define the initial state, which is passed to the useReducer hook.

Action Object: Actions are objects that describe how the state should change. Typically, they have a type property and can optionally carry additional data (payload).

Usage:
The useReducer hook accepts the reducer function and the initial state, returning an array with the current state and a dispatch function to trigger state changes.

Syntax:
javascript
Copy code
const [state, dispatch] = useReducer(reducer, initialState);
state: The current state value.
dispatch: A function that you call to send an action to the reducer.
Example:
javascript
Copy code
import React, { useReducer } from 'react';

const initialState = { count: 0 };

function reducer(state, action) {
  switch (action.type) {
    case 'INCREMENT':
      return { count: state.count + 1 };
    case 'DECREMENT':
      return { count: state.count - 1 };
    default:
      return state;
  }
}

function Counter() {
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <div>
      <p>Count: {state.count}</p>
      <button onClick={() => dispatch({ type: 'INCREMENT' })}>Increment</button>
      <button onClick={() => dispatch({ type: 'DECREMENT' })}>Decrement</button>
    </div>
  );
}

export default Counter;
When to Use useReducer:
When you have a complex state with multiple sub-values.
When the state transitions are more complicated than simple updates (e.g., you need to apply different logic for different actions).
When you want to have a more predictable state management pattern similar to Redux.
In summary, useReducer provides a powerful way to manage complex state logic, making it a great choice when useState becomes insufficient.